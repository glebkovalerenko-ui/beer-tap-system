-- ====================================================================================
-- Файл схемы базы данных для PostgreSQL
-- Проект: Beer Tap System
-- Версия: 2.0 (с полными комментариями)
-- Описание: Этот скрипт создает всю необходимую структуру таблиц, связей и индексов для серверной части приложения.
-- ====================================================================================

-- Включаем расширение для поддержки типа данных UUID.
-- Это необходимо для генерации уникальных идентификаторов.
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- ====================================================================================
-- Таблица: guests
-- Назначение: Хранит всю информацию о гостях (клиентах) бара.
-- ====================================================================================
CREATE TABLE guests (
    -- --- Идентификаторы и ключевая информация ---
    guest_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), -- Уникальный идентификатор гостя. UUID выбран для безопасности и уникальности в распределенной системе. Генерируется автоматически.
    
    -- --- Персональные данные ---
    last_name VARCHAR(50) NOT NULL, -- Фамилия. Обязательна для заполнения.
    first_name VARCHAR(50) NOT NULL, -- Имя. Обязательно для заполнения.
    patronymic VARCHAR(50), -- Отчество. Необязательно, т.к. может отсутствовать.
    
    -- --- Контактная и верификационная информация ---
    phone_number VARCHAR(20) UNIQUE NOT NULL, -- Номер телефона. Уникальный, используется как основной способ связи и, возможно, логина.
    date_of_birth DATE NOT NULL, -- Дата рождения. Тип DATE используется, т.к. время не имеет значения. Необходимо для подтверждения возраста.
    id_document VARCHAR(100) UNIQUE NOT NULL, -- Номер документа, удостоверяющего личность. Уникальный, чтобы предотвратить создание дублирующих аккаунтов.
    
    -- --- Финансовая информация и статус ---
    balance DECIMAL(10, 2) NOT NULL DEFAULT 0.00, -- Текущий баланс гостя. DECIMAL(10,2) используется для точных финансовых расчетов.
    is_active BOOLEAN NOT NULL DEFAULT TRUE, -- Флаг активности. Позволяет временно заблокировать гостя без удаления данных.
    
    -- --- Служебные метки времени ---
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(), -- Дата и время создания записи. TIMESTAMPTZ используется для корректной работы с часовыми поясами.
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW() -- Дата и время последнего обновления записи.
);

-- ====================================================================================
-- Таблица: cards
-- Назначение: Хранит информацию о выданных гостям RFID-картах.
-- ====================================================================================
CREATE TABLE cards (
    card_uid VARCHAR(50) PRIMARY KEY, -- Уникальный идентификатор RFID-карты. Считывается со сканера, поэтому является первичным ключом.
    guest_id UUID NOT NULL, -- Внешний ключ, связывающий карту с конкретным гостем.
    status VARCHAR(20) NOT NULL DEFAULT 'active', -- Статус карты. Позволяет отслеживать жизненный цикл ('active', 'inactive', 'lost', 'stolen').
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(), -- Дата и время привязки карты.
    
    -- Определение внешнего ключа для связи с таблицей guests
    CONSTRAINT fk_guest
        FOREIGN KEY(guest_id) 
        REFERENCES guests(guest_id)
        ON DELETE CASCADE -- Правило: если гость удаляется из системы, все его карты автоматически удаляются.
);

-- ====================================================================================
-- Таблица: kegs
-- Назначение: Учет кег (бочек) с пивом.
-- ====================================================================================
CREATE TABLE kegs (
    keg_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), -- Уникальный внутренний идентификатор кеги.
    
    -- --- Описание напитка ---
    beer_name VARCHAR(100) NOT NULL, -- Название пива/напитка.
    brewery VARCHAR(100), -- Название пивоварни.
    beer_style VARCHAR(50), -- Стиль пива (e.g., IPA, Lager, Stout).
    abv DECIMAL(4, 2), -- Крепость (Alcohol By Volume). Точность до сотых.
    
    -- --- Учет объема ---
    initial_volume_ml INTEGER NOT NULL, -- Начальный объем кеги в миллилитрах при постановке на склад.
    current_volume_ml INTEGER NOT NULL, -- Текущий оставшийся объем. Обновляется после каждого налива.
    
    -- --- Финансовая и бизнес-аналитика ---
    purchase_price DECIMAL(10, 2), -- Себестоимость закупки кеги. Позволяет считать маржинальность.
    tapped_at TIMESTAMPTZ, -- Дата и время, когда кегу подключили к крану. NULL, если еще на складе.
    finished_at TIMESTAMPTZ, -- Дата и время, когда кега закончилась. NULL, пока в ней есть пиво.
    
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW() -- Дата и время добавления кеги в систему.
);

-- ====================================================================================
-- Таблица: taps
-- Назначение: Описание физических пивных кранов.
-- ====================================================================================
CREATE TABLE taps (
    tap_id SERIAL PRIMARY KEY, -- Уникальный ID крана. SERIAL (автоинкремент) подходит, т.к. краны пронумерованы физически (1, 2, 3...).
    keg_id UUID, -- Какая кега сейчас подключена к этому крану. Может быть NULL, если кран свободен или на промывке.
    display_name VARCHAR(50) NOT NULL, -- Название крана, которое видит пользователь (e.g., "Кран #1: Вишневый Крик").
    price_per_ml DECIMAL(10, 4) NOT NULL, -- Цена за миллилитр. Высокая точность (4 знака) для корректных расчетов.
    last_cleaned_at TIMESTAMPTZ, -- Дата последней промывки крана. Важно для контроля качества.
    
    -- Определение внешнего ключа для связи с таблицей kegs
    CONSTRAINT fk_keg
        FOREIGN KEY(keg_id) 
        REFERENCES kegs(keg_id)
        ON DELETE SET NULL -- Правило: если кега удаляется из системы, поле keg_id в кране просто становится NULL (кран освобождается).
);

-- ====================================================================================
-- Таблица: pours
-- Назначение: Журнал всех наливов. Самая главная транзакционная таблица.
-- ====================================================================================
CREATE TABLE pours (
    pour_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), -- Уникальный ID самой записи о наливе.
    
    -- --- Ключевые участники транзакции ---
    guest_id UUID NOT NULL, -- Гость, который совершил налив.
    card_uid VARCHAR(50) NOT NULL, -- Карта, которой воспользовались.
    tap_id INTEGER NOT NULL, -- Кран, из которого наливали.
    keg_id UUID NOT NULL, -- Кега, из которой наливали.
    
    -- --- Детали транзакции ---
    client_tx_id VARCHAR(100) UNIQUE NOT NULL, -- Уникальный ID от контроллера (Raspberry Pi). Защищает от записи дублей при сбоях сети.
    volume_ml INTEGER NOT NULL, -- Объем налитого напитка в миллилитрах.
    price_per_ml_at_pour DECIMAL(10, 4) NOT NULL, -- Цена за мл на момент налива. Сохраняется для исторической точности.
    amount_charged DECIMAL(10, 2) NOT NULL, -- Итоговая списанная сумма (volume_ml * price_per_ml_at_pour).
    
    -- --- Временные метки ---
    poured_at TIMESTAMPTZ NOT NULL, -- Точное время, когда произошел налив (передается от контроллера).
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(), -- Время, когда запись была добавлена в базу данных.
    
    -- Определение внешних ключей для целостности данных
    CONSTRAINT fk_guest FOREIGN KEY(guest_id) REFERENCES guests(guest_id),
    CONSTRAINT fk_card FOREIGN KEY(card_uid) REFERENCES cards(card_uid),
    CONSTRAINT fk_tap FOREIGN KEY(tap_id) REFERENCES taps(tap_id),
    CONSTRAINT fk_keg FOREIGN KEY(keg_id) REFERENCES kegs(keg_id)
);

-- ====================================================================================
-- Создание ИНДЕКСОВ
-- Назначение: Ускоряют операции поиска (SELECT) по часто используемым полям.
-- Без них поиск в больших таблицах был бы крайне медленным.
-- ====================================================================================

-- Индекс для быстрого поиска всех карт, принадлежащих одному гостю.
CREATE INDEX idx_cards_guest_id ON cards(guest_id);

-- Индекс для быстрого поиска всех наливов одного гостя (например, для истории операций).
CREATE INDEX idx_pours_guest_id ON pours(guest_id);

-- Индекс для быстрой выборки всех наливов с определенного крана.
CREATE INDEX idx_pours_tap_id ON pours(tap_id);

-- КРИТИЧЕСКИ ВАЖНЫЙ ИНДЕКС!
-- Позволяет мгновенно проверять уникальность `client_tx_id` для предотвращения дублирования транзакций.
CREATE INDEX idx_pours_client_tx_id ON pours(client_tx_id);

-- Завершение транзакции по созданию схемы.
COMMIT;