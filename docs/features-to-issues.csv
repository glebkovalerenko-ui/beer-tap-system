"Title","Body","Labels","Estimate"
"Implement Guest Search API (GET /api/guests)","Implement a performant guest search endpoint supporting query parameter `q` (partial matches on name/phone/uid). Should support pagination (`limit`, `page`) and return fields: id, name, balance, cards[]. Acceptance: returns results within 1s on local network, supports debounce from frontend.","backend,api,high-priority","M"
"Add Guest CRUD endpoints and validation","Create `POST /api/guests`, `GET /api/guests/{id}`, `PUT /api/guests/{id}` with input validation and duplication checks. Acceptance: create returns 201 + guest object; update returns 200 and persists changes.","backend,api,high-priority","M"
"Frontend: Guests page & GuestForm component","Implement Guests page: list + search + GuestForm modal for create/edit. Use react-query and form validation (Yup). Acceptance: can create guest and see it in list without refresh.","frontend,ui,high-priority","M"
"Implement Card Bind/Unbind endpoints","Create `POST /api/cards/bind` and `POST /api/cards/unbind` endpoints. Bind supports `uid` or `wait_for_tap` (null uid) mode. Acceptance: binding records card and links guest_id; unbind deactivates.","backend,api,high-priority","S"
"Frontend: Assign Card UI flow","Create a modal for Assign Card: select guest -> click 'Assign' -> UI waits for controller tap (or manual UID input) -> shows success. Acceptance: binds card and updates guest card list.","frontend,ui,high-priority","M"
"Top-up Balance endpoint and ledger entry","Implement `POST /api/guests/{guest_id}/topup` which creates a topup transaction and adjusts guest balance. Acceptance: transaction created, balance updated, entry visible in transactions API.","backend,api,high-priority","S"
"Frontend: Top-up UI & validation","Add Top-up button to Guest card: opens modal, validates amount >0, sends request and shows new balance. Acceptance: balance updates and success toast shown.","frontend,ui,high-priority","S"
"Implement Pours listing and status query (GET /api/pours)","Add endpoint to query pours by status and controller/tap filters. Acceptance: supports `status=pending|confirmed|failed`, pagination and returns client_tx_id.","backend,api,high-priority","M"
"Emergency Stop API & audit logging","Implement `POST /api/system/emergency` which sets global emergency flag and logs actor + reason. Acceptance: flag set, audit entry created, controllers return emergency=true on status query.","backend,api,high-priority,security","S"
"Controller registration and health endpoints","Implement `POST /api/controllers/register` and `GET /api/controllers` to list controllers with last_seen and backlog. Acceptance: controller register persists, admin can view controllers.","backend,api,high-priority","S"
"Keg CRUD endpoints","Implement `POST /api/kegs`, `GET /api/kegs`, `PUT /api/kegs/{id}`, `DELETE /api/kegs/{id}`. Acceptance: CRUD works, DB models created, validation present.","backend,api,high-priority","M"
"Frontend: Taps dashboard (list taps + assigned keg)","Implement Taps page: shows each tap, assigned keg info, status and quick action to assign keg. Acceptance: can assign keg to tap and UI updates.","frontend,ui,high-priority","M"
"Add audit logging middleware","Create DB table and middleware that logs actor, endpoint, payload (sanitized). Acceptance: all state-changing endpoints create audit records.","backend,security,medium-priority","S"
"Add basic Auth skeleton (dev/testing)","Implement basic JWT auth skeleton (register/login) and add guards to admin endpoints (for dev). Acceptance: protected endpoints return 401 for unauthenticated requests.","backend,security,high-priority","M"
