# main_controller.py (–≤–µ—Ä—Å–∏—è 9.0, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ—Ç–æ—Ç–∏–ø)
import sqlite3
import sys
import uuid
import time
from datetime import datetime, timezone
import select

from smartcard.System import readers
from smartcard.util import toHexString
from smartcard.Exceptions import NoCardException, CardConnectionException

import threading
from config import TAP_ID, PRICE_PER_100ML_CENTS, SYNC_INTERVAL_SECONDS
from sync_client import sync_pours_to_server

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
DB_NAME = "local_journal.db"
#TAP_ID = 1 #--- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
#PRICE_PER_100ML_CENTS = 150 #--- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞

def background_sync_task():
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ.
    –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ –ø—ã—Ç–∞–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º.
    """
    print("[SYNC_THREAD] –§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω.")
    while True:
        try:
            sync_pours_to_server()
        except Exception as e:
            print(f"[SYNC_THREAD] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}")
        
        time.sleep(SYNC_INTERVAL_SECONDS)

def init_db():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –∏ —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç.
    """
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS pours (
            client_tx_id TEXT PRIMARY KEY,
            card_uid TEXT NOT NULL,
            tap_id INTEGER NOT NULL,
            start_ts TEXT NOT NULL,
            end_ts TEXT NOT NULL,
            volume_ml INTEGER NOT NULL,
            price_cents INTEGER NOT NULL,
            status TEXT NOT NULL DEFAULT 'new'
        )
    """)
    conn.commit()
    conn.close()
    print("[DB] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

# --- –§—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def get_reader():
    try:
        r = readers()
        if not r: return None
        return r[0]
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—á–∏—Ç—ã–≤–∞—Ç–µ–ª–µ–π: {e}")
        return None

def log_pour_to_db(card_uid, volume_ml, price_cents, start_time, end_time):
    client_tx_id = str(uuid.uuid4())
    pour_data = (client_tx_id, card_uid, TAP_ID, start_time.isoformat(), end_time.isoformat(), volume_ml, price_cents, 'new', 0)
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute("INSERT INTO pours (client_tx_id, card_uid, tap_id, start_ts, end_ts, volume_ml, price_cents, status, attempts) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)", pour_data)
        conn.commit()
        conn.close()
        print(f"‚úÖ [–£–°–ü–ï–•] –ù–∞–ª–∏–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î. TX_ID: {client_tx_id}")
    except sqlite3.Error as e:
        print(f"‚ùå [–û–®–ò–ë–ö–ê –ë–î] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–ª–∏–≤: {e}")

# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å —Ñ–∏–Ω–∞–ª—å–Ω–æ–π, –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π ---
def main_loop():
    print("=============================================")
    print(f"    –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∫—Ä–∞–Ω–∞ #{TAP_ID} –∑–∞–ø—É—â–µ–Ω (v9.0)")
    print("=============================================")
    
    reader = get_reader()
    if not reader:
        sys.exit("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: RFID-—Å—á–∏—Ç—ã–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã—Ö–æ–¥.")
        
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—á–∏—Ç—ã–≤–∞—Ç–µ–ª—å: {reader}")
    print("\n>>> –û–∂–∏–¥–∞–Ω–∏–µ RFID-–∫–∞—Ä—Ç—ã... (–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C)")

    try:
        while True:
            try:
                # 1. –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ. –ï—Å–ª–∏ –∫–∞—Ä—Ç—ã –Ω–µ—Ç, –≤—ã–∑–æ–≤–µ—Ç NoCardException.
                connection = reader.createConnection()
                connection.connect()

                # --- –ï–°–õ–ò –ú–´ –ó–î–ï–°–¨, –ó–ù–ê–ß–ò–¢ –û–ü–ï–†–ê–¶–ò–Ø –ù–ê–ß–ê–õ–ê–°–¨ ---
                
                # 2. –ß–∏—Ç–∞–µ–º UID
                GET_UID = [0xFF, 0xCA, 0x00, 0x00, 0x00]
                data, sw1, sw2 = connection.transmit(GET_UID)

                if (sw1, sw2) != (0x90, 0x00):
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å UID. –£–±–µ—Ä–∏—Ç–µ –∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –∫–∞—Ä—Ç—É –∑–∞–Ω–æ–≤–æ.")
                    while True: 
                        try: connection.getATR(); time.sleep(0.5)
                        except: break # –ñ–¥–µ–º, –ø–æ–∫–∞ —É–±–µ—Ä—É—Ç –ø—Ä–æ–±–ª–µ–º–Ω—É—é –∫–∞—Ä—Ç—É
                    continue

                uid = toHexString(data).replace(" ", "")
                print(f"\nüí≥ –ö–∞—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∞. UID: {uid}")

                # 3. –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞
                print("    –ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã '–Ω–∞–ª–∏—Ç—å' (q –¥–ª—è –æ—Ç–º–µ–Ω—ã). –£ –≤–∞—Å 10 —Å–µ–∫...")
                user_choice = None
                start_wait = time.time()
                while time.time() - start_wait < 10:
                    connection.getATR() # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–∞—Ä—Ç—ã
                    if sys.stdin in select.select([sys.stdin], [], [], 0.1)[0]:
                        user_choice = sys.stdin.readline().strip().lower()
                        break
                
                if user_choice is None: print("\nüö´ –í—Ä–µ–º—è –Ω–∞ –≤—ã–±–æ—Ä –∏—Å—Ç–µ–∫–ª–æ."); continue
                if user_choice == 'q': print("üö´ –ù–∞–ª–∏–≤ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."); continue

                # 4. –≠–º—É–ª—è—Ü–∏—è –Ω–∞–ª–∏–≤–∞
                print("    ...—ç–º—É–ª—è—Ü–∏—è –Ω–∞–ª–∏–≤–∞, –Ω–µ —É–±–∏—Ä–∞–π—Ç–µ –∫–∞—Ä—Ç—É...")
                start_ts = datetime.now(timezone.utc)
                for _ in range(int(1.5 / 0.1)):
                    connection.getATR(); time.sleep(0.1)

                # 5. –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                end_ts = datetime.now(timezone.utc)
                volume_poured_ml = 250
                price = int(volume_poured_ml / 100 * PRICE_PER_100ML_CENTS)
                print(f"    –ù–∞–ª–∏—Ç–æ: {volume_poured_ml} –º–ª. –°—Ç–æ–∏–º–æ—Å—Ç—å: {price / 100:.2f} —É.–µ.")
                log_pour_to_db(uid, volume_poured_ml, price, start_ts, end_ts)
                
                print("...–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É...")
                while True:
                    try: connection.getATR(); time.sleep(0.5)
                    except: break
                print("\n‚úÖ –ö–∞—Ä—Ç–∞ —É–±—Ä–∞–Ω–∞. –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞.")
                print("\n>>> –û–∂–∏–¥–∞–Ω–∏–µ RFID-–∫–∞—Ä—Ç—ã... (–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C)")

            except NoCardException:
                # –®–¢–ê–¢–ù–´–ô –†–ï–ñ–ò–ú –û–ñ–ò–î–ê–ù–ò–Ø. –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º.
                time.sleep(0.5)
                continue

            except CardConnectionException:
                # –û–ü–ï–†–ê–¶–ò–Ø –ë–´–õ–ê –ü–†–ï–†–í–ê–ù–ê. –°–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º.
                print("\nüö´ –ö–∞—Ä—Ç–∞ —É–±—Ä–∞–Ω–∞. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                print("\n>>> –û–∂–∏–¥–∞–Ω–∏–µ RFID-–∫–∞—Ä—Ç—ã... (–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C)")
                time.sleep(1)
                continue

            except Exception as e:
                print(f"\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                time.sleep(5)

    except KeyboardInterrupt:
        print("\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Ctrl+C). –í—ã—Ö–æ–¥.")
        sys.exit(0)

if __name__ == "__main__":
    init_db() # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ë–î –∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç

    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
    # daemon=True –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ—Ç–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è,
    # –∫–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞.
    sync_thread = threading.Thread(target=background_sync_task, daemon=True)
    sync_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è RFID-–∫–∞—Ä—Ç
    main_loop()
