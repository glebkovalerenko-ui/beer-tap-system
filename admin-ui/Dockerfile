# admin-ui/Dockerfile

# --- ЭТАП 1: "Мастерская" (Сборка приложения) ---
# Берем готовый образ с Node.js, чтобы иметь инструменты для сборки
FROM node:22-alpine AS build
# Устанавливаем рабочую директорию внутри контейнера
WORKDIR /app
# Копируем файлы с описанием зависимостей
COPY admin-ui/package*.json ./
# Устанавливаем все зависимости, нужные для сборки
RUN npm install
# Копируем всё из папки admin-ui
COPY admin-ui/ .
# Запускаем команду сборки. Она создаст оптимизированную версию
# нашего приложения в папке /app/dist
RUN npm run build

# --- ЭТАП 2: "Выставочный зал" (Сервировка готовых файлов) ---
# Берем крошечный образ с веб-сервером Nginx
FROM nginx:1.21-alpine
# Копируем ТОЛЬКО результат сборки (папку dist) из этапа "build"
# в папку, из которой Nginx раздает файлы
COPY --from=build /app/dist /usr/share/nginx/html
# Копируем наш собственный файл конфигурации для Nginx
# Этот файл мы создадим/изменим на следующем шаге
COPY nginx/nginx.conf /etc/nginx/conf.d/default.conf
# Говорим Docker, что контейнер будет слушать 80-й порт
EXPOSE 80
# Команда, которая запустится при старте контейнера
CMD ["nginx", "-g", "daemon off;"]