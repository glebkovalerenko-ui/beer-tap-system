# docker-compose.yml
version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: beer_postgres_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./docs/postgres_schema.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    restart: always

 ### Добавляем проверку здоровья для PostgreSQL ###
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build: ./backend
    container_name: beer_backend_api
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    env_file:
      ./.env
    depends_on:
      - postgres
    restart: always

  admin-ui:
    build:
      context: . # Контекст сборки - корень проекта
      dockerfile: admin-ui/Dockerfile # Путь к нашему новому Dockerfile
    container_name: beer_admin_ui_nginx
    ports:
      - "80:80" # Публикуем веб-интерфейс на главный 80-й порт!
    depends_on:
      - backend # Запускаем только после бэкенда
    restart: always

volumes:
  postgres_data: