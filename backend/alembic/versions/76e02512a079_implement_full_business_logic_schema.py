"""Implement full business logic schema

Revision ID: 76e02512a079
Revises: 
Create Date: 2025-10-14 11:09:19.056766

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '76e02512a079'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('cards', 'card_uid',
               existing_type=sa.VARCHAR(length=50),
               comment='Уникальный идентификатор, читаемый с карты',
               existing_nullable=False)
    op.alter_column('cards', 'guest_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('cards', 'status',
               existing_type=sa.VARCHAR(length=20),
               comment='Статус: active, inactive, lost',
               existing_nullable=False,
               existing_server_default=sa.text("'active'::character varying"))
    op.alter_column('cards', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('idx_cards_guest_id'), table_name='cards')
    op.create_index(op.f('ix_cards_guest_id'), 'cards', ['guest_id'], unique=False)
    op.create_index(op.f('ix_cards_status'), 'cards', ['status'], unique=False)
    op.drop_constraint(op.f('fk_guest'), 'cards', type_='foreignkey')
    op.create_foreign_key(None, 'cards', 'guests', ['guest_id'], ['guest_id'])
    op.alter_column('guests', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('guests', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(op.f('guests_id_document_key'), 'guests', type_='unique')
    op.create_index(op.f('ix_guests_id_document'), 'guests', ['id_document'], unique=True)
    op.create_index(op.f('ix_guests_last_name'), 'guests', ['last_name'], unique=False)
    op.add_column('kegs', sa.Column('beverage_id', sa.UUID(), nullable=False))
    op.add_column('kegs', sa.Column('status', sa.String(length=20), nullable=False, comment='Статус: full, in_use, empty'))
    op.alter_column('kegs', 'initial_volume_ml',
               existing_type=sa.INTEGER(),
               comment='Начальный объем в миллилитрах',
               existing_nullable=False)
    op.alter_column('kegs', 'current_volume_ml',
               existing_type=sa.INTEGER(),
               comment='Текущий остаток в миллилитрах',
               existing_nullable=False)
    op.alter_column('kegs', 'purchase_price',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               nullable=False,
               comment='Закупочная стоимость всей кеги')
    op.alter_column('kegs', 'tapped_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Время подключения к крану',
               existing_nullable=True)
    op.alter_column('kegs', 'finished_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Время, когда кега закончилась',
               existing_nullable=True)
    op.alter_column('kegs', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.create_index(op.f('ix_kegs_beverage_id'), 'kegs', ['beverage_id'], unique=False)
    op.create_index(op.f('ix_kegs_status'), 'kegs', ['status'], unique=False)
    op.create_foreign_key(None, 'kegs', 'beverages', ['beverage_id'], ['beverage_id'])
    op.drop_column('kegs', 'abv')
    op.drop_column('kegs', 'beer_style')
    op.drop_column('kegs', 'beer_name')
    op.drop_column('kegs', 'brewery')
    op.alter_column('pours', 'client_tx_id',
               existing_type=sa.VARCHAR(length=100),
               comment='Идентификатор от RPi для идемпотентности',
               existing_nullable=False)
    op.alter_column('pours', 'price_per_ml_at_pour',
               existing_type=sa.NUMERIC(precision=10, scale=4),
               comment='Цена на момент налива',
               existing_nullable=False)
    op.alter_column('pours', 'amount_charged',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               comment='Списанная сумма',
               existing_nullable=False)
    op.alter_column('pours', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('idx_pours_client_tx_id'), table_name='pours')
    op.drop_index(op.f('idx_pours_guest_id'), table_name='pours')
    op.drop_index(op.f('idx_pours_tap_id'), table_name='pours')
    op.drop_constraint(op.f('pours_client_tx_id_key'), 'pours', type_='unique')
    op.create_index(op.f('ix_pours_card_uid'), 'pours', ['card_uid'], unique=False)
    op.create_index(op.f('ix_pours_client_tx_id'), 'pours', ['client_tx_id'], unique=True)
    op.create_index(op.f('ix_pours_guest_id'), 'pours', ['guest_id'], unique=False)
    op.create_index(op.f('ix_pours_keg_id'), 'pours', ['keg_id'], unique=False)
    op.add_column('taps', sa.Column('status', sa.String(length=20), nullable=False, comment='Статус: active, locked, cleaning, empty'))
    op.alter_column('taps', 'display_name',
               existing_type=sa.VARCHAR(length=50),
               comment="Имя крана для UI, e.g., 'Кран 1'",
               existing_nullable=False)
    op.create_index(op.f('ix_taps_status'), 'taps', ['status'], unique=False)
    op.create_unique_constraint(None, 'taps', ['display_name'])
    op.create_unique_constraint(None, 'taps', ['keg_id'])
    op.drop_constraint(op.f('fk_keg'), 'taps', type_='foreignkey')
    op.create_foreign_key(None, 'taps', 'kegs', ['keg_id'], ['keg_id'])
    op.drop_column('taps', 'price_per_ml')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('taps', sa.Column('price_per_ml', sa.NUMERIC(precision=10, scale=4), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'taps', type_='foreignkey')
    op.create_foreign_key(op.f('fk_keg'), 'taps', 'kegs', ['keg_id'], ['keg_id'], ondelete='SET NULL')
    op.drop_constraint(None, 'taps', type_='unique')
    op.drop_constraint(None, 'taps', type_='unique')
    op.drop_index(op.f('ix_taps_status'), table_name='taps')
    op.alter_column('taps', 'display_name',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment="Имя крана для UI, e.g., 'Кран 1'",
               existing_nullable=False)
    op.drop_column('taps', 'status')
    op.drop_index(op.f('ix_pours_keg_id'), table_name='pours')
    op.drop_index(op.f('ix_pours_guest_id'), table_name='pours')
    op.drop_index(op.f('ix_pours_client_tx_id'), table_name='pours')
    op.drop_index(op.f('ix_pours_card_uid'), table_name='pours')
    op.create_unique_constraint(op.f('pours_client_tx_id_key'), 'pours', ['client_tx_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_pours_tap_id'), 'pours', ['tap_id'], unique=False)
    op.create_index(op.f('idx_pours_guest_id'), 'pours', ['guest_id'], unique=False)
    op.create_index(op.f('idx_pours_client_tx_id'), 'pours', ['client_tx_id'], unique=False)
    op.alter_column('pours', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('pours', 'amount_charged',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               comment=None,
               existing_comment='Списанная сумма',
               existing_nullable=False)
    op.alter_column('pours', 'price_per_ml_at_pour',
               existing_type=sa.NUMERIC(precision=10, scale=4),
               comment=None,
               existing_comment='Цена на момент налива',
               existing_nullable=False)
    op.alter_column('pours', 'client_tx_id',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='Идентификатор от RPi для идемпотентности',
               existing_nullable=False)
    op.add_column('kegs', sa.Column('brewery', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('kegs', sa.Column('beer_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
    op.add_column('kegs', sa.Column('beer_style', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('kegs', sa.Column('abv', sa.NUMERIC(precision=4, scale=2), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'kegs', type_='foreignkey')
    op.drop_index(op.f('ix_kegs_status'), table_name='kegs')
    op.drop_index(op.f('ix_kegs_beverage_id'), table_name='kegs')
    op.alter_column('kegs', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('kegs', 'finished_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Время, когда кега закончилась',
               existing_nullable=True)
    op.alter_column('kegs', 'tapped_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Время подключения к крану',
               existing_nullable=True)
    op.alter_column('kegs', 'purchase_price',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               nullable=True,
               comment=None,
               existing_comment='Закупочная стоимость всей кеги')
    op.alter_column('kegs', 'current_volume_ml',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Текущий остаток в миллилитрах',
               existing_nullable=False)
    op.alter_column('kegs', 'initial_volume_ml',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Начальный объем в миллилитрах',
               existing_nullable=False)
    op.drop_column('kegs', 'status')
    op.drop_column('kegs', 'beverage_id')
    op.drop_index(op.f('ix_guests_last_name'), table_name='guests')
    op.drop_index(op.f('ix_guests_id_document'), table_name='guests')
    op.create_unique_constraint(op.f('guests_id_document_key'), 'guests', ['id_document'], postgresql_nulls_not_distinct=False)
    op.alter_column('guests', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('guests', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(None, 'cards', type_='foreignkey')
    op.create_foreign_key(op.f('fk_guest'), 'cards', 'guests', ['guest_id'], ['guest_id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_cards_status'), table_name='cards')
    op.drop_index(op.f('ix_cards_guest_id'), table_name='cards')
    op.create_index(op.f('idx_cards_guest_id'), 'cards', ['guest_id'], unique=False)
    op.alter_column('cards', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('cards', 'status',
               existing_type=sa.VARCHAR(length=20),
               comment=None,
               existing_comment='Статус: active, inactive, lost',
               existing_nullable=False,
               existing_server_default=sa.text("'active'::character varying"))
    op.alter_column('cards', 'guest_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('cards', 'card_uid',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='Уникальный идентификатор, читаемый с карты',
               existing_nullable=False)
    # ### end Alembic commands ###
